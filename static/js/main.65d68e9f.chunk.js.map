{"version":3,"sources":["types/Filter.ts","store/loadingReducer.ts","store/currentTodoReducer.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","type","selectors","loading","loadingReducer","state","action","SET_TODO","todoId","payload","loadingSelectors","currentTodoSelectors","reducer","combineReducers","currentTodoReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","todos","selectUser","className","map","todo","cn","completed","title","onClick","userId","id","TodoFilter","changeFilteredBy","changeQuery","query","onChange","event","target","value","handleChange","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedUser","useState","user","setUser","useEffect","loadUser","a","userFromServer","href","email","name","App","setTodos","setUserId","visibleTodos","setVisibleTodos","filteredBy","setFilteredBy","setQuery","isLoading","useSelector","selectedTodo","dispatch","useDispatch","loadTodos","todosFromServer","loadingActions","handleQueryFiltering","toLowerCase","includes","filter","usersTodo","find","filterType","input","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65d68e9f.chunk.js","sourcesContent":["export enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","type StartLoading = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoading = {\n  type: 'FINISH_LOADING',\n};\n\nexport const actions = {\n  startLoading: (): StartLoading => ({ type: 'START_LOADING' }),\n  finishLoading: (): FinishLoading => ({ type: 'FINISH_LOADING' }),\n};\n\ntype Action = StartLoading | FinishLoading;\n\nexport const selectors = {\n  getLoading: (loading: boolean) => loading,\n};\n\nconst initialState = false;\n\nconst loadingReducer = (state = initialState, action: Action): boolean => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","const SET_TODO = 'SET_TODO';\n\nexport const actions = {\n  setTodo: (todoId: number) => ({ type: SET_TODO, payload: todoId }),\n};\n\ntype Action = {\n  type: 'SET_TODO',\n  payload: number,\n};\n\nexport const selectors = {\n  getTodo: (todoId: number) => todoId,\n};\n\nconst initialState = 0;\n\nconst loadingReducer = (state = initialState, action: Action): number => {\n  switch (action.type) {\n    case SET_TODO:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport\nloadingReducer,\n{ selectors as loadingSelectors } from './loadingReducer';\nimport\ncurrentTodoReducer,\n{ selectors as currentTodoSelectors } from './currentTodoReducer';\n\nexport const selectors = {\n  getLoading(state: { loading: boolean }) {\n    return loadingSelectors.getLoading(state.loading);\n  },\n\n  getTodo(state: { todoId: number }) {\n    return currentTodoSelectors.getTodo(state.todoId);\n  },\n};\n\nconst reducer = combineReducers({\n  loading: loadingReducer,\n  todoId: currentTodoReducer,\n});\n\nexport const store = createStore(reducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (id: number, todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectUser }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={cn(\n            todo.completed\n              ? 'has-text-success has-background-success-light'\n              : 'has-text-danger has-background-danger-light',\n          )}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">\n            <span className=\"icon is-size-5\">\n              <i className={cn('fas',\n                todo.completed\n                  ? 'fa-check-square'\n                  : 'fa-ban')}\n              />\n            </span>\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            {todo.title}\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button is-outlined is-primary\"\n              type=\"button\"\n              onClick={() => {\n                selectUser(todo.userId, todo.id);\n              }}\n            >\n              {`Show ${todo.userId}`}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  changeFilteredBy: (filterType: string) => void,\n  changeQuery: (input: string) => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  changeFilteredBy,\n  changeQuery,\n  query,\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    changeFilteredBy(event.target.value);\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    changeQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => handleChange(event)}\n          >\n            <option\n              value={Filter.ALL}\n            >\n              All\n            </option>\n            <option\n              value={Filter.ACTIVE}\n            >\n              Active\n            </option>\n            <option\n              value={Filter.COMPLETED}\n            >\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete has-text\"\n            onClick={() => changeQuery('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | undefined,\n  selectedUser: number | 0,\n  selectUser: (id: number, todoId: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  selectedUser,\n  selectUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const userFromServer = await getUser(selectedUser);\n\n      setUser(userFromServer);\n    };\n\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => selectUser(0, 0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                todo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filter } from './types/Filter';\nimport { selectors } from './store';\nimport { actions as loadingActions } from './store/loadingReducer';\nimport { actions as currentTodoReducer } from './store/currentTodoReducer';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [filteredBy, setFilteredBy] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const isLoading = useSelector(selectors.getLoading);\n  const selectedTodo = useSelector(selectors.getTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadingActions.startLoading());\n      setTodos(todosFromServer);\n      setVisibleTodos(todosFromServer);\n    };\n\n    loadTodos();\n    dispatch(loadingActions.finishLoading());\n  }, []);\n\n  const changeFilteredBy = (filterType: string) => {\n    setFilteredBy(filterType);\n  };\n\n  const changeQuery = (input: string) => {\n    setQuery(input);\n  };\n\n  const handleQueryFiltering = (title: string) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  };\n\n  useEffect(() => {\n    switch (filteredBy) {\n      case Filter.ALL:\n        setVisibleTodos(todos.filter(todo => handleQueryFiltering(todo.title)));\n        break;\n\n      case Filter.ACTIVE:\n        setVisibleTodos(todos.filter(todo => !todo.completed && handleQueryFiltering(todo.title)));\n        break;\n\n      case Filter.COMPLETED:\n        setVisibleTodos(todos.filter(todo => todo.completed && handleQueryFiltering(todo.title)));\n        break;\n\n      default:\n        break;\n    }\n  }, [filteredBy, query]);\n\n  const selectUser = (id: number, todoId: number) => {\n    setUserId(id);\n    dispatch(currentTodoReducer.setTodo(todoId));\n  };\n\n  const usersTodo = todos.find(todo => todo.id === selectedTodo);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                changeFilteredBy={changeFilteredBy}\n                changeQuery={changeQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoading && <Loader />}\n              <TodoList todos={visibleTodos} selectUser={selectUser} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!userId && (\n        <TodoModal\n          todo={usersTodo}\n          selectedUser={userId}\n          selectUser={selectUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}